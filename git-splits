#!/usr/bin/env bash

######################################
# Git Split
#
#
# Installation :
# Add this to the same directory that your git executable is in, and make sure it has executable
# permissions : i.e.: chmod o+x git-splits
#
# Splits A Repo's directory into a separate branch
# retaining the directory's history, and removing
# the rest. Because it uses filter-branch, the original branch will be
# written to .git/refs/original as a backup. If you run this command twice on the same
# branch, you'll need to use -f which will remove the backup before running it again.
#
# Usage:
# First, checkout the branch you want to split.
# git splits -b mynewbranch dir1 dir2 dir3
#
# run it again on same branch:
# git splits -f -b mynewbranch2 dir1 dir2 dir3
# -f deletes .git/refs/original . required for subsequent uses on ssame branch
# -b <branch name> The branch name that the directories will be extracted into
#

#
# @author <andrew@nomostock.com>
# original idea/credit: jkeating/http://stackoverflow.com/a/6006679/3306354
######################################


#####################
#
# Determine platform
# http://stackoverflow.com/a/18434831
#####################

# NOTE: on macOS, this requires GNU findutils,
# installed using e.g. brew install findutils:
# https://brew.sh/
# https://apple.stackexchange.com/a/69332
case "${OSTYPE}" in
    darwin*)
        grep='ggrep'
        xargs='gxargs'
        ;;
    linux-*)
        grep='grep'
        xargs='xargs'
        ;;
    msys)
        grep='grep'
        xargs='xargs'
        ;;
    *)
        echo 'ERROR'
        echo "unsupported operating system: ${OSTYPE}"
        exit 1
        ;;
esac

#####################
#
# GetOpts
# http://stackoverflow.com/a/16496491
#####################
#usage() { echo "Usage: git splits [-f] [-t] -b <branch_name> <dir1> <dir2>" 1>&2; #exit 1; }

#########################
# The command line help #
#########################
usage() {
    echo "Usage: git splits [option...] -b branch_name dir_name [dir_nameâ€¦]"
    echo
    echo "   -b          new branch name"
    echo "   -f          force, use if you get 'create a new backup' error"
    echo "   -t          forces grep to process all files as text, instead of as a binary type which is the default. use this option if you get binary file match errors"
    echo
    # echo some stuff here for the -a or --add-options 
    1>&2;exit 1
}


# intialization

binary_files_type=binary
gs_messages=

while getopts "ftb:" o; do
    case "${o}" in
        f)
            gs_messages+='removed backup refs/orginal \n';
            rm -rf .git/refs/original;
            rm -rf .git-rewrite;

            ;;
        t)
            gs_messages+='used t flag, processed binary files as text \n';
            binary_files_type=text
            ;;            
        b)
            branch_name=${OPTARG}
            ;;

        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z "${branch_name}" ]; then
    usage
fi


for var in "$@"
do

    dirs="| \"${grep}\" --binary-files=\"${binary_files_type}\" -z -v \"^$var\" \
    $dirs"

done

#remove .git-rewrite if it already exists.
rm -rf .git-rewrite;
git branch  "${branch_name}";

git filter-branch \
    --prune-empty \
    --index-filter '
        git ls-tree -z -r --name-only --full-tree $GIT_COMMIT \
         '"${dirs}"' \
       | '"${xargs}"' -0 -r git rm --cached -r
    ' \
    -- \
    "${branch_name}";

    echo "New branch created at ${branch_name}";
    echo -e "${gs_messages}";
    
git branch --list ${branch_name};
exit;

#########################
#
# Using git filter-branch instead of git splits
#
#########################
#
git filter-branch \
    --prune-empty \
    --index-filter '
        git ls-tree -z -r --name-only --full-tree $GIT_COMMIT \
        | '"${grep}"' -z -v "^config" \
        | '"${grep}"' -z -v "^public_html" \
        | '"${xargs}"' -0 -r git rm --cached -r
    ' \
    -- \
    "${branch_name}"
